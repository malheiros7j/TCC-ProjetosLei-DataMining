.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Dirent 3pm"
.TH Dirent 3pm "2002-12-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Dirent \- Access to dirent structs returned by readdir
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use IO::Dirent;
\&
\&  opendir DIR, "/usr/local/foo";
\&  my @entries = readdirent(DIR);
\&  closedir DIR;
\&
\&  print $entries[0]\->{name}, "\en";
\&  print $entries[0]\->{type}, "\en";
\&  print $entries[0]\->{inode}, "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Returns a list of hashrefs. Each hashref contains the name of the
directory entry, its inode for the filesystem it resides on and its
type (if available). If the file type or inode are not available, it
won't be there!
.PP
\&\fBIO::Dirent\fR exports the following symbols by default:
.PP
.Vb 1
\&    readdirent
.Ve
.PP
The following tags may be exported to your namespace:
.PP
.Vb 1
\&    ALL
.Ve
.PP
which includes \fBreaddirent\fR and the following symbols:
.PP
.Vb 9
\&    DT_UNKNOWN
\&    DT_FIFO
\&    DT_CHR
\&    DT_DIR
\&    DT_BLK
\&    DT_REG
\&    DT_LNK
\&    DT_SOCK
\&    DT_WHT
.Ve
.PP
These symbols can be used to test the file type returned by
\&\fBreaddirent\fR in the following manner:
.PP
.Vb 2
\&    for my $entry ( readdirent(DIR) ) {
\&        next unless $entry\->{\*(Aqtype\*(Aq} == DT_LNK;
\&
\&        print $entry\->{\*(Aqname\*(Aq} . " is a symbolic link.\en";
\&    }
.Ve
.PP
For platforms that do not implement file type in its dirent struct,
\&\fBreaddirent\fR will return a hashref with a single key/value of 'name'
and the filename (effectively the same as readdir). This is subject
to change, if I can implement some of the to do items below.
.SH "CAVEATS"
.IX Header "CAVEATS"
This was written on FreeBSD which implements a robust (but somewhat
non-standard) dirent struct and which includes a file type entry. I
have plans to make this module more portable and useful by doing a
stat on each directory entry to find the file type and inode number
when the dirent.h does not implement it otherwise.
.PP
Improvements and additional ports are welcome.
.SH "TO DO"
.IX Header "TO DO"
.IP "\(bu" 4
For platforms that do not implement a dirent struct with file type,
do a stat on the entry and populate the structure anyway.
.IP "\(bu" 4
Consider making \fBreaddirent\fR return a list of objects instead of a
list of hashrefs. Nah...
.IP "\(bu" 4
Do some memory profiling (I'm not sure if I have any leaks or not).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2002 Scott Wiersdorf.
.PP
This library is free software; you can redistribute it and/or modify
it under the terms of the Perl Artistic License.
.SH "AUTHOR"
.IX Header "AUTHOR"
Scott Wiersdorf, <scott@perlcode.org>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to Nick Ing-Simmons for his help on the perl-xs mailing list.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIdirent\fR\|(5), perlxstut, perlxs, perlguts, perlapi
